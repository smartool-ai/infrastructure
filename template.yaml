AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  JKBX Infrastructure Layer
Metadata:
  AWS::ServerlessRepo::Application:
    Name: jkbx-infrastructure-layer
    Description: JKBX Infrastructure Layer
    Author: jakep
    SemanticVersion: 0.1.0

Parameters:
  StageName:
    Type: String
    Default: nonprod
    AllowedValues:
      - nonprod
      - prod
      - dev
      - staging
      - local

Mappings:
  EnvMappings:
    nonprod:
      tagenv: nonprd
      env: nonprod
      REGION: us-west-2
    prod:
      tagenv: prd
      env: prod
      REGION: us-west-2
  AZRegions:
    ap-northeast-1:
      AZs: [ "a", "b" ]
    ap-northeast-2:
      AZs: [ "a", "b" ]
    ap-south-1:
      AZs: [ "a", "b" ]
    ap-southeast-1:
      AZs: [ "a", "b" ]
    ap-southeast-2:
      AZs: [ "a", "b" ]
    ca-central-1:
      AZs: [ "a", "b" ]
    eu-central-1:
      AZs: [ "a", "b" ]
    eu-west-1:
      AZs: [ "a", "b" ]
    eu-west-2:
      AZs: [ "a", "b" ]
    sa-east-1:
      AZs: [ "a", "b" ]
    us-east-1:
      AZs: [ "a", "b" ]
    us-east-2:
      AZs: [ "a", "b" ]
    us-west-1:
      AZs: [ "a", "b" ]
    us-west-2:
      AZs: [ "a", "b" ]

Resources:
  VPC:
    Type: AWS::EC2::VPC
    DeletionPolicy: Retain
    Properties:
      EnableDnsSupport: True
      EnableDnsHostnames: True
      CidrBlock: "10.0.0.0/16"
      Tags:
        - Key: Name
          Value: !Sub "JKBX-VPC-${StageName}"

  VPCFlowLog:
    Type: AWS::EC2::FlowLog
    Properties:
      LogDestination: arn:aws:s3:::lll-aws-vpc-flow-logs
      LogDestinationType: s3
      LogFormat: ${account-id} ${action} ${az-id} ${bytes} ${dstaddr} ${dstport} ${end} ${flow-direction} ${instance-id} ${interface-id} ${log-status} ${packets} ${pkt-dst-aws-service} ${pkt-dstaddr} ${pkt-src-aws-service} ${pkt-srcaddr} ${protocol} ${region} ${srcaddr} ${srcport} ${start} ${sublocation-id} ${sublocation-type} ${subnet-id} ${tcp-flags} ${traffic-path} ${type} ${version} ${vpc-id}
      MaxAggregationInterval: 600
      ResourceId: !Ref VPC
      ResourceType: VPC
      TrafficType: ALL

  PublicSubnet0:
    Type: AWS::EC2::Subnet
    DeletionPolicy: Retain
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone:
        Fn::Sub:
          - "${AWS::Region}${AZ}"
          - AZ: !Select [ 0, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]
      CidrBlock: "10.0.0.0/24"
      MapPublicIpOnLaunch: True
      Tags:
        - Key: Name
          Value: "JKBX-Public-Subnet-A"

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    DeletionPolicy: Retain
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone:
        Fn::Sub:
          - "${AWS::Region}${AZ}"
          - AZ: !Select [ 1, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]
      CidrBlock: "10.0.1.0/24"
      MapPublicIpOnLaunch: True
      Tags:
        - Key: Name
          Value: "JKBX-Public-Subnet-B"

  PrivateSubnet0:
    Type: AWS::EC2::Subnet
    DeletionPolicy: Retain
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone:
        Fn::Sub:
          - "${AWS::Region}${AZ}"
          - AZ: !Select [ 0, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]
      CidrBlock: "10.0.2.0/24"
      Tags:
        - Key: Name
          Value: "JKBX-Private-Subnet-A"

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    DeletionPolicy: Retain
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone:
        Fn::Sub:
          - "${AWS::Region}${AZ}"
          - AZ: !Select [ 1, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]
      CidrBlock: "10.0.3.0/24"
      Tags:
        - Key: Name
          Value: "JKBX-Private-Subnet-B"

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DeletionPolicy: Retain
    Properties:
      Tags:
        - Key: "Name"
          Value: "JKBX-InternetGateway"

  GatewayToInternet:
    Type: AWS::EC2::VPCGatewayAttachment
    DeletionPolicy: Retain
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    DeletionPolicy: Retain
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: "Name"
          Value: "JKBX-Public-Route-Table"

  PublicRoute:
    Type: AWS::EC2::Route
    DeletionPolicy: Retain
    DependsOn: GatewayToInternet
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId:
        Ref: InternetGateway

  PublicSubnetRouteTableAssociation0:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DeletionPolicy: Retain
    Properties:
      SubnetId: !Ref PublicSubnet0
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DeletionPolicy: Retain
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicNetworkAcl:
    Type: "AWS::EC2::NetworkAcl"
    DeletionPolicy: Retain
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: "Name"
          Value: "JKBX-Network-ACL"

  InboundHTTPPublicNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    DeletionPolicy: Retain
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: "allow"
      Egress: "false"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: "0"
        To: "65535"

  OutboundPublicNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    DeletionPolicy: Retain
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: "allow"
      Egress: "true"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: "0"
        To: "65535"

  PublicSubnetNetworkAclAssociation0:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DeletionPolicy: Retain
    Properties:
      SubnetId: !Ref PublicSubnet0
      NetworkAclId: !Ref PublicNetworkAcl

  PublicSubnetNetworkAclAssociation1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DeletionPolicy: Retain
    Properties:
      SubnetId: !Ref PublicSubnet1
      NetworkAclId: !Ref PublicNetworkAcl

  ElasticIP0:
    Type: AWS::EC2::EIP
    DeletionPolicy: Retain
    Properties:
      Domain: vpc
      Tags:
      - Key: Name
        Value: "JKBX-ElasticIP-1"

  ElasticIP1:
    Type: AWS::EC2::EIP
    DeletionPolicy: Retain
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: "JKBX-ElasticIP-2"

  NATGateway0:
    Type: AWS::EC2::NatGateway
    DeletionPolicy: Retain
    Properties:
      AllocationId: !GetAtt ElasticIP0.AllocationId
      SubnetId: !Ref PublicSubnet0
      Tags:
        - Key: Name
          Value: "JKBX-NatGateway-1"

  NATGateway1:
    Type: AWS::EC2::NatGateway
    DeletionPolicy: Retain
    Properties:
      AllocationId: !GetAtt ElasticIP1.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: "JKBX-NatGateway-2"

  PrivateRouteTable0:
    Type: AWS::EC2::RouteTable
    DeletionPolicy: Retain
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: "JKBX-PrivateRouteTable-1"

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    DeletionPolicy: Retain
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: "JKBX-PrivateRouteTable-2"

  PrivateRouteToInternet0:
    Type: AWS::EC2::Route
    DeletionPolicy: Retain
    Properties:
      RouteTableId: !Ref PrivateRouteTable0
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref NATGateway0

  PrivateRouteToInternet1:
    Type: AWS::EC2::Route
    DeletionPolicy: Retain
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref NATGateway1

  PrivateSubnetRouteTableAssociation0:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    DeletionPolicy: Retain
    Properties:
      SubnetId: !Ref PrivateSubnet0
      RouteTableId: !Ref PrivateRouteTable0

  PrivateSubnetRouteTableAssociation1:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    DeletionPolicy: Retain
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1


# RDS and Related Resources
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "RDS Security Group"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: Tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: 10.0.0.0/0

  RDSSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "RDS Subnet group"
      SubnetIds:
        - !Ref PrivateSubnet0
        - !Ref PrivateSubnet1

  DatabaseCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      DatabaseName: Tron
      MasterUsername: postgres
      MasterUserPassword: postgres
      Engine: aurora-postgresql
      Port: 5432
      DBSubnetGroupName: !Ref RDSSubnetGroup
      VpcSecurityGroupIds:
        - !GetAtt RDSSecurityGroup.GroupId

  AuroraDBFirstInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      Engine: aurora-postgresql
      DBClusterIdentifier: !Ref DatabaseCluster
      DBInstanceClass: db.t4g.medium
      DBSubnetGroupName: !Ref RDSSubnetGroup
      PubliclyAccessible: False
    
  # Dynamo UserManagement Table
  UserManagementTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: "UserManagement"
      TableClass: STANDARD
      DeletionProtectionEnabled: True
      AttributeDefinitions:
        - 
          AttributeName: "user_id"
          AttributeType: S
        -
          AttributeName: "email"
          AttributeType: S
      KeySchema:
        - 
          AttributeName: "user_id"
          KeyType: "HASH"

      GlobalSecondaryIndexes:
        - IndexName: "email-index"
          KeySchema: 
            - AttributeName: "email" 
              KeyType: "HASH"
          Projection:
            ProjectionType: ALL
          # ProvisionedThroughput: 
          #   ReadCapacityUnits: 5
          #   WriteCapacityUnits: 5
      BillingMode: PAY_PER_REQUEST
    
  UserMetadataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: "UserMetadata"
      TableClass: STANDARD
      DeletionProtectionEnabled: True
      AttributeDefinitions:
        -
          AttributeName: "email"
          AttributeType: S
      KeySchema:
        - 
          AttributeName: "email"
          KeyType: "HASH"
      BillingMode: PAY_PER_REQUEST

  # Dynamo Order Table
  OrderTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: "OrdersTable"
      TableClass: STANDARD
      DeletionProtectionEnabled: True
      AttributeDefinitions:
        -
          AttributeName: "email"
          AttributeType: S
        -
          AttributeName: "order_id"
          AttributeType: S
        -
          AttributeName: "created_datetime"
          AttributeType: S
      KeySchema:
        -
          AttributeName: "email"
          KeyType: "HASH"
        -
          AttributeName: "order_id"
          KeyType: "RANGE"
      
      GlobalSecondaryIndexes:
        - IndexName: "created_datetime-index"
          KeySchema:
            - AttributeName: "email" 
              KeyType: "HASH"
            - AttributeName: "created_datetime" 
              KeyType: "RANGE"
          Projection:
            ProjectionType: ALL
            
      BillingMode: PAY_PER_REQUEST
  
  # Dynamo Track metadata table
  TrackMetadataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: "TrackMetadataTable"
      TableClass: STANDARD
      DeletionProtectionEnabled: True
      AttributeDefinitions:
        -
          AttributeName: "song_id"
          AttributeType: S
      KeySchema:
        -
          AttributeName: "song_id"
          KeyType: "HASH"
      BillingMode: PAY_PER_REQUEST
  
  # Dynamo Atrists metadata table
  ArtistMetadataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: "ArtistMetadataTable"
      TableClass: STANDARD
      DeletionProtectionEnabled: True
      AttributeDefinitions:
        -
          AttributeName: "artist_id"
          AttributeType: S
      KeySchema:
        -
          AttributeName: "artist_id"
          KeyType: "HASH"
      BillingMode: PAY_PER_REQUEST

  UserWatchlistTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: "UserWatchlistTable"
      TableClass: STANDARD
      DeletionProtectionEnabled: True
      AttributeDefinitions:
        -
          AttributeName: "email"
          AttributeType: S
        -
          AttributeName: "asset_id"
          AttributeType: S
      KeySchema:
        -
          AttributeName: "email"
          KeyType: "HASH"
        -
          AttributeName: "asset_id"
          KeyType: "RANGE"
      BillingMode: PAY_PER_REQUEST
  
  AssetTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: "AssetTable"
      TableClass: STANDARD
      DeletionProtectionEnabled: True
      AttributeDefinitions:
        -
          AttributeName: "song_id"
          AttributeType: S
        -
          AttributeName: "asset_id"
          AttributeType: S
        -
          AttributeName: "market_cap"
          AttributeType: N
        -
          AttributeName: "streaming_count"
          AttributeType: N
        -
          AttributeName: "spv_name"
          AttributeType: S
      KeySchema:
        -
          AttributeName: "song_id"
          KeyType: "HASH"
        -
          AttributeName: "asset_id"
          KeyType: "RANGE"

      GlobalSecondaryIndexes:
        - IndexName: "market-cap-index"
          KeySchema:
            - AttributeName: "spv_name" 
              KeyType: "HASH"
            - AttributeName: "market_cap" 
              KeyType: "RANGE"
          Projection:
            ProjectionType: ALL
        - IndexName: "streaming-count-index"
          KeySchema: 
            - AttributeName: "spv_name" 
              KeyType: "HASH"
            - AttributeName: "streaming_count" 
              KeyType: "RANGE"
          Projection:
            ProjectionType: ALL
        - IndexName: "asset-id-index"
          KeySchema: 
            - AttributeName: "asset_id" 
              KeyType: "HASH"
          Projection:
            ProjectionType: ALL

      BillingMode: PAY_PER_REQUEST

  # IAM Role for DynamoDB
  DynamoDatabasesAccessIAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: DynamoDatabasesAccessRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: UserMetadataTablePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "dynamodb:BatchGetItem"
                  - "dynamodb:GetItem"
                  - "dynamodb:PutItem"
                  - "dynamodb:UpdateItem"
                  - "dynamodb:DeleteItem"
                  - "dynamodb:DescribeTable"
                  - "dynamodb:Query"
                Resource: !GetAtt UserMetadataTable.Arn
        - PolicyName: UserManagementTablePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "dynamodb:GetItem"
                  - "dynamodb:DescribeTable"
                  - "dynamodb:Query"
                Resource:
                  - !GetAtt UserManagementTable.Arn
                  - !Join [ "/index/", [ !GetAtt UserManagementTable.Arn, "email-index"]]
        - PolicyName: OrdersTablePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "dynamodb:BatchGetItem"
                  - "dynamodb:GetItem"
                  - "dynamodb:PutItem"
                  - "dynamodb:UpdateItem"
                  - "dynamodb:DeleteItem"
                  - "dynamodb:DescribeTable"
                  - "dynamodb:Query"
                  - "dynamodb:Scan"
                Resource:
                  - !GetAtt OrderTable.Arn
        - PolicyName: TrackMetadataTablePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "dynamodb:BatchGetItem"
                  - "dynamodb:GetItem"
                  - "dynamodb:PutItem"
                  - "dynamodb:UpdateItem"
                  - "dynamodb:DeleteItem"
                  - "dynamodb:DescribeTable"
                  - "dynamodb:Query"
                  - "dynamodb:Scan"
                Resource:
                  - !GetAtt TrackMetadataTable.Arn
        - PolicyName: ArtistMetadataTablePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "dynamodb:BatchGetItem"
                  - "dynamodb:GetItem"
                  - "dynamodb:PutItem"
                  - "dynamodb:UpdateItem"
                  - "dynamodb:DeleteItem"
                  - "dynamodb:DescribeTable"
                  - "dynamodb:Query"
                  - "dynamodb:Scan"
                Resource:
                  - !GetAtt ArtistMetadataTable.Arn
        - PolicyName: UserWatchlistTablePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "dynamodb:BatchGetItem"
                  - "dynamodb:GetItem"
                  - "dynamodb:PutItem"
                  - "dynamodb:UpdateItem"
                  - "dynamodb:DeleteItem"
                  - "dynamodb:DescribeTable"
                  - "dynamodb:Query"
                  - "dynamodb:Scan"
                Resource:
                  - !GetAtt UserWatchlistTable.Arn
        - PolicyName: AssetTablePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "dynamodb:BatchGetItem"
                  - "dynamodb:GetItem"
                  - "dynamodb:PutItem"
                  - "dynamodb:UpdateItem"
                  - "dynamodb:DeleteItem"
                  - "dynamodb:DescribeTable"
                  - "dynamodb:Query"
                  - "dynamodb:Scan"
                Resource:
                  - !GetAtt AssetTable.Arn
                  - !Join [ "/index/", [ !GetAtt AssetTable.Arn, "market-cap-index"]]
                  - !Join [ "/index/", [ !GetAtt AssetTable.Arn, "streaming-count-index"]]
                  - !Join [ "/index/", [ !GetAtt AssetTable.Arn, "asset-id-index"]]
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "ec2:DescribeNetworkInterfaces"
                  - "ec2:CreateNetworkInterface"
                  - "ec2:DeleteNetworkInterface"
                  - "ec2:DescribeInstances"
                  - "ec2:AttachNetworkInterface"
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "sns:Publish"
                  - "lambda:InvokeFunction"
                Resource: "*"

  # Caching layer
  ElasticacheSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: "Elasticache Subnet Group"
      SubnetIds:
        - !Ref PrivateSubnet0
        - !Ref PrivateSubnet1
  ElasticacheSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Elasticache Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 6379
          ToPort: 6379
          CidrIp: 10.0.0.0/0
  ElasticacheCluster:
    Type: 'AWS::ElastiCache::CacheCluster'
    Properties:    
      Engine: redis
      CacheNodeType: cache.t2.micro
      CacheSubnetGroupName: !Ref ElasticacheSubnetGroup
      NumCacheNodes: 1
      Port: 6379
      VpcSecurityGroupIds:
        - !GetAtt 
          - ElasticacheSecurityGroup
          - GroupId

  # IAM user for programmatic access to DynamoDB
  # Auth0IAMUser:
  #   Type: AWS::IAM::User
  
  # Auth0IAMAccessKey:
  #   Type: AWS::IAM::AccessKey
  #   Properties:
  #     UserName: !Ref Auth0IAMUser
  # IAM access key and secret access key will initially be manual , later refactored through this template


# WAF/Web ACL
  StudioWAF:
    Type: AWS::WAFv2::WebACL
    Properties:
      DefaultAction:
        Allow: {}
      Name: !Sub "${StageName}-Studio-WAF"
      Scope: REGIONAL
      VisibilityConfig:
        CloudWatchMetricsEnabled: true
        MetricName: "studio"
        SampledRequestsEnabled: true
      Rules:
        - Name: AWSCommonManagedRules
          Priority: 0
          OverrideAction:
            Count: {}
          VisibilityConfig:
            CloudWatchMetricsEnabled: true
            MetricName: CommonAWSRulesMetric
            SampledRequestsEnabled: true
          Statement:
            ManagedRuleGroupStatement:
              Name: AWSManagedRulesCommonRuleSet
              VendorName: AWS
              ExcludedRules: []

# Route53 hosted zone

  ApiHostedZone:
    Type: "AWS::Route53::HostedZone"
    Properties:
      HostedZoneConfig:
        Comment: 'Hosted Zone'
      Name: !Sub "${StageName}-api.jkbx.com"
      # VPCs:
      #   -
      #     VPCId: !Ref VPC
      #     VPCRegion: 'us-west-2'
      
  RiderApiHostedZone:
    Type: "AWS::Route53::HostedZone"
    Properties:
      HostedZoneConfig:
        Comment: 'Hosted Zone'
      Name: !Sub "${StageName}-rider.jkbx.com"

# # DNS Entry
  # ApiDnsRecord:
  #   Type: AWS::Route53::RecordSet
  #   Properties:
  #     HostedZoneId: !Ref ApiHostedZone
  #     Name: !Sub "${StageName}-api.jkbx.com"
  #     ResourceRecords:
  #     - 192.168.0.1
  #     TTL: 900
  #     Type: A

# cert
  ApiCertificate: 
    Type: "AWS::CertificateManager::Certificate"
    Properties: 
      DomainName: !Sub "${StageName}-api.jkbx.com"
      ValidationMethod: DNS
  
  RiderApiCertificate: 
    Type: "AWS::CertificateManager::Certificate"
    Properties: 
      DomainName: !Sub "${StageName}-rider.jkbx.com"
      ValidationMethod: DNS